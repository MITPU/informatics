---
layout: post
title:  "Эрэмбэлэлтийн энгийн алгоритмууд"
date:   2019-11-26 01:59:54 -0500
author: "Адъяа"
category: "эрэмбэлэлт"
comments: true
---
# **Эрэмбэлэлт гэж юу вэ?**

Эрэмбэлэлт нь бидний өдөр дутмын амьдралд байнга тааралддаг. Биеийн тамирын хичээл дээр өндрөөс нам уруу жагсах гэх мэт. Ингэж дараалалд оруулсанаар бид ангийн хамгийн өндөр болон намхан хүүхдийг хялбархан мэдэж болхоос гадна ангийн дундаж өндөртэй хүүхдийг төвөггүй олж чадах юм.

Эрэмбэлэлтийн алгоритм нь массивын элементүүдийг ямар нэгэн тодорхой дараалалд оруулж эмх замбараатай болгодог. Тухайлбал өсөхөөр эсвэл буурахаар гэх мэт. Жишээ нь n = 9  уртай дараах массив  `[5, 7, 4, 3, 2, 1, 6, 8, 9]` байлаа гэж үзвэл өсөхөөр эрэмбэлсэний дараа массив нь `[1, 2, 3, 4, 5, 6, 7, 8, 9]` байдалтай болно . 

Эрэмбэлэлтийг хийх олон арга зам байдаг. Бодлогын нөхцөл болон хязгаарлалтаас хамаарч оновчтой сонголт хийн ашиглах нь чухал. 

# **Сонгон эрэмбэлэх - Selection Sort**

Энэ нь хамгийн энгийн эрэмбэлэлтийн алгоритм юм. Массивийг эрэмбэлэхдээ эрэмбэлэгдсэн эрэмбэлэгдээгүй гэсэн 2 хэсэгт хуваан эрэмбэлэгдээгүй хэсгээс хамгийн бага элементийг олж эрэмбэлэгдээгүй хэсгийн хамгийн эхний элементтэй байрыг нь сольж эрэмбэлээгүй хэсгээ нэгээр багасгана. Гэх мэт явсаар массивыг эрэлбэлж дуусгана. 

<center class="table-title">Хугацааны үнэлгээ</center>

{:.time-space-complexity}
|                | Хугацаа         |
|----------------|-----------------|
|Хамгийн шилдэг| O (n^2)|
|Дундаж | O (n^2) |
|Хамгийн муу | O(n^2)|

Жишээ нь: [4, 3, 6, 2, 1, 9, 10] гэсэн массив өгөгдөхөд

Алхам 1: [4, 3, 6, 2, 1, 9, 10] -> [1, 3, 6, 2, 4, 9, 10]\
Алхам 2: [1, 3, 6, 2, 4, 9, 10] -> [1, 2, 6, 3, 4, 9, 10]\
Алхам 3: [1, 2, 6, 3, 4, 9, 10] -> [1, 2, 3, 6, 4, 9, 10]\
Алхам 4: [1, 2, 3, 6, 4, 9, 10] -> [1, 2, 3, 4, 6, 9, 10] гэх мэт.. 


{% highlight python %}
def selectionSort(arr): 
    for i in range(len(arr)):
        # Хамгийн бага элемент олох
    	min_indx = i
    	for j in range (i+1, len(arr)):
    		if(arr[min_indx] > arr[j]):
    			min_indx = j
        # Хамгийн бага элементийг эрэмблэгдээгүй хэсгийн хамгийн эхний элементтэй байрыг солино
    	temp = arr[i]
    	arr[i] = ar[min_indx]
    	arr[min_indx] = temp
{% endhighlight %}

# **Оруулан эрэмбэлэх - Insertion Sort**
*Insertion sort* нь эрэмбэлэлтийн энгийн алгоритмуудын нэг бөгөөд бидний гартаа байгаа хөзрөө хэрхэн нэг нэгээр нь багаас их рүү нь эрэмбэлэн байрлуулдагтай ижил зарчмаар ажилладаг. Энэ эрэмбэлэх алгоритм нь томоохон хэмжээний өгөгдөлд ашиглах үед бусад ахисан түвшний аргуудаас удаан боловч дараах гол давуу талуудтай. Үүнд:

- Кодчилоход хялбар;
- Маш бага өгөгдөл дээр хурдан ажилладаг;
- Бусад ижил түвшний (n^2) эрэмбэлэх аргуудыг (*selection sort*, *bubble sort*) бодвол илүү хурдтай байх хандлагатай;
- Нэмэлт санах ой ашигладаггүй;

<center class="table-title">Хугацаа болон санах ойн үнэлгээ</center>

{:.time-space-complexity}
|                | Хугацаа         | Санах ой         |
|---|---|---|
| Сайн нөхцөлд  | O(n)  |  O(1) |
| Дунджаар | O(n^2)  | O(1) |
| Муу нөхцөлд  |  O(n^2) |  O(1) |

{% highlight java %}
// insertion sort алгоритмын Java дээрх код 
class InsertionSort { 
    /*insertion sort ашиглаж буй эрэмбэлэх функц*/
    void sort(int arr[]) 
    { 
        int n = arr.length; 
        for (int i = 1; i < n; ++i) { 
            int key = arr[i]; 
            int j = i - 1; 
  
            /* key-гээс их arr[0..i-1]-ын элементүүдийг 
            одоо байгаа байрлалын яг өмнөх байрлал руу нүүлгэж байна */
            while (j >= 0 && arr[j] > key) { 
                arr[j + 1] = arr[j]; 
                j = j - 1; 
            } 
            arr[j + 1] = key; 
        } 
    } 
  
    /* n хэмжээтэй массивиыг хэвлэх туслах функц*/
    static void printArray(int arr[]) 
    { 
        int n = arr.length; 
        for (int i = 0; i < n; ++i) 
            System.out.print(arr[i] + " "); 
  
        System.out.println(); 
    } 
  
    // main функц
    public static void main(String args[]) 
    { 
        int arr[] = { 12, 11, 13, 5, 6 }; 
  
        InsertionSort ob = new InsertionSort(); 
        ob.sort(arr); 
  
        printArray(arr); 
    } 
}

{% endhighlight %}


## **Ашигласан материалууд:**
1. https://www.topcoder.com/community/competitive-programming/tutorials/sorting
2. https://en.wikipedia.org/wiki/Insertion_sort
3. https://www.geeksforgeeks.org/insertion-sort
