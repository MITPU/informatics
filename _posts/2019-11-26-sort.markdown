---
layout: post
title:  "Эрэмбэлэлт - Sort"
date:   2019-11-26 01:59:54 -0500
categories: Sort
---
# **Эрэмбэлэлт - Sort**

Эрэмбэлэлт нь бидний өдөр дутмын амьдралд байнга тааралддаг. Биеийн тамирын хичээл дээр өндөрөөс намруу жигсах гэх мэт. Ингэж дараалалт оруулсанаар бид ангийн хамгийн өндөр болон намхан хүүхдийг хялбархан мэдэж болхоос гадна ангийн дундаж өндөртэй хүүхдийг төвөггүй олж чадах юм.

Эрэмбэлэлтийн алгоритм нь массивын элементүүдийг ямар нэгэн тодорхой дараалалд оруулж эмх замбараатай болгодог тухайлбал өсөхөөр эсвэл буурхаар гэх мэт. Жишээ нь n = 9  уртай дараах массив  `[5, 7, 4, 3, 2, 1, 6, 8, 9]` байлаа гэж үзвэл өсөхөөр эрэмбэлсэний дараа массив нь `[1, 2, 3, 4, 5, 6, 7, 8, 9]` байдалтай болно . 

Эрэмбэлэлтийг хийх олон арга зам байдаг. Бодлогын нөхцөл болон хязгаарлалтаас хамаарж оновчтой сонголт хийн ашиглах нь чухал. 

## **Сонгон эрэмблэх - Selection Sort**

Энэ нь хамгийн энгийн эрэмбэлэлтийн алгоритм юм. Массивийг эрэмблэхдээ эрэмблэгдсэн эрэмблэгдээгүй гэсэн 2 хэсэгт хуваан эрэмблэгдээгүй хэсгээс хамийг бага элементийг олж эрэмблэгдээгүй хэсгийн хамгийн эхний элементтэй байрийг нь солж эрэмблээгүй хэсгээ нэгээр багасгана. Гэх мэт явсаар массивыг эрэлбэлж дуусгана. 

**Time Complexity -  Хугацааны үнэлгээ**

Хамгын жилдэг| O (n^2)
Дундаж | O (n^2)
Хамгын муу | O(n^2)

Жишээ нь: [4, 3, 6, 2, 1, 9, 10] гэсэн массив өгөгдөхөд

Алхам 1: [4, 3, 6, 2, 1, 9, 10] -> [1, 3, 6, 2, 4, 9, 10]\
Алхам 2: [1, 3, 6, 2, 4, 9, 10] -> [1, 2, 6, 3, 4, 9, 10]\
Алхам 3: [1, 2, 6, 3, 4, 9, 10] -> [1, 2, 3, 6, 4, 9, 10]\
Алхам 4: [1, 2, 3, 6, 4, 9, 10] -> [1, 2, 3, 4, 6, 9, 10] гэх мэт.. 


```python
def selectionSort(arr): 
    for i in range(len(arr)):
        # Хамгийн бага элемент олох
    	min_indx = i
    	for j in range (i+1, len(arr)):
    		if(arr[min_indx] > arr[j]):
    			min_indx = j
        # Хамгийн бага элементийг эрэмблэгдээгүй хэсгийн хамгийн эхний элементтэй байрыг солино
    	temp = arr[i]
    	arr[i] = ar[min_indx]
    	arr[min_indx] = temp
```

## **Хурдан эрэмблэх - Quick Sort**

[Quicksort][Quicksort] бол [Divide and Conquer][Divide and Conquer] дээр суурилсан эрэмбэлэлтийн алгоритм юм.  Quicksort нь массиваас пивот цэг сонгон аваад массивийн элемэнтүүдийг тухайн пивот элемэнтээс их болон бага гэсэн 2 жижиг массивт хуваан дахин 2 жижиг массивыг энэхүү байдалаар эрэмбэлнэ. 

**Time Complexity -  Хугацааны үнэлгээ**

Хамгын жилдэг| O(n log n)
Дундаж | O(n log n)
Хамгын муу | O(n^2)

```python

def partition(arr, low, high): 
    i = ( low-1 )         #жижиг элемэнтүүдийн индекс
    pivot = arr[high]     # пивот 
    for j in range(low , high): 
  
        # хэрэв одоо байгаа элемент пивот элементээс бага буюу тэнцүү үед
        if   arr[j] <= pivot: 
            i = i+1 
            arr[i],arr[j] = arr[j],arr[i] 
  
    arr[i+1],arr[high] = arr[high],arr[i+1] 
    return ( i+1 ) 
  
def quickSort(arr, low, high): 
    if low < high: 
        # pi пивот идекс 
        pi = partition(arr, low, high) 
 
        # пивот цэгээс өмнөх болон дараах (их, бага) дэд массивыг дахин эрэмбэлэх
        quickSort(arr, low, pi-1) 
        quickSort(arr, pi+1, high) 
```

## **Merge Sort**


## **Ажигласан материалууд:**
1. https://en.wikipedia.org/wiki/Quicksort
2. https://www.topcoder.com/community/competitive-programming/tutorials/sorting

[Quicksort]: https://en.wikipedia.org/wiki/Quicksort
[Divide and Conquer]: https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm

